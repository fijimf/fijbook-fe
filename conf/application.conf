# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.http.secret.key="074530362711132146571"

play.server.pidfile.path=/dev/null

# The application languages
# ~~~~~
play.i18n.langs=["en"]

# The application DI modules
# ~~~~~
play.modules.enabled += "modules.BaseModule"
play.modules.enabled += "modules.JobModule"
play.modules.enabled += "modules.SilhouetteModule"
play.modules.enabled += "play.api.libs.mailer.MailerModule"
play.modules.enabled += "play.api.libs.ws.ahc.AhcWSModule"
play.modules.enabled += "play.libs.ws.ahc.AhcWSModule"

play.http.filters = "utils.Filters"
play.filters.headers.contentSecurityPolicy = null

# Security Filter Configuration - CORS
# https://stackoverflow.com/questions/45558233/getting-cors-errors-in-scala-play-framework-v2-6-x
play.filters.cors {
  allowedOrigins = ["http://localhost:9000"]
  allowedHttpMethods = ["GET", "POST"]
  #other cors configuration
  allowedHttpHeaders = ["Accept", "Content-Type"]
}

play.filters.csrf.bypassCorsTrustedOrigins = false
play.filters.csrf.cookie.name="PLAY_CSRF_TOKEN" // We store the CSRF token in a cookie instead of the session so that UI app can read it
play.filters.csrf.contentType.blackList=[ // We would also check AJAX requests from type application/json
  "application/x-www-form-urlencoded",
  "multipart/form-data",
  "text/plain",
  "application/json"
]

# Play mailer
play.mailer {
  host=email-smtp.us-east-1.amazonaws.com
  port=587
  tls=true
  user=${?AWS_SMTP_USERNAME}
  password=${?AWS_SMTP_PASSWORD}
}

play.ws.cache {
  enabled = false
  heuristics.enabled = false
  name = "play-ws-cache"
  cachingProviderName = ""
  cacheManagerResource = null
  cacheManagerURI = null
}

# Akka config
akka {
  loglevel = "INFO"
  jvm-exit-on-fatal-error=off

  # Auth token cleaner
  quartz.schedules.AuthTokenCleaner {
    expression = "0 0 */1 * * ?"
    timezone = "UTC"
    description = "cleanup the auth tokens on every hour"
  }
}

include "silhouette.conf"

play.ws.cache.enabled=true

deepfij {
  services {
    user {
      host = localhost
      port = 8077
//        host = user
//        port = ${USER_SERVER_PORT}
      statusEndpoint = "/status"
    },
    schedule {
      host = localhost
      port = 8074
//        host = schedule
//        port = ${SCHED_SERVER_PORT}
      statusEndpoint = "/status"
    }
    quote {
      host = localhost
      port = 8075
//        host = quote
//        port = ${QUOTE_SERVER_PORT}
      statusEndpoint = "/status"
    }
    news {
      host = localhost
      port = 8076
//        host = news
//        port = ${NEWS_SERVER_PORT}
      statusEndpoint = "/status"
    }
    scraping {
      host = localhost
      port = 8078
//        host = scraping
//        port = ${SCRAPE_SERVER_PORT}
      statusEndpoint = "/status"
    }
  }
}